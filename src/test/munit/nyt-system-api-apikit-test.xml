<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd ">
    <munit:config name="nyt-system-api-apikit-test.xml" />
    <http:request-config name="HTTP_Request_Configuration" basePath="/nyt" doc:name="HTTP Request configuration">
        <http:request-connection host="localhost" port="${http.port}" />
    </http:request-config>
    
    <munit:test name="test-multiple-results" description="Verifying functionality of API when multiple results are returned from the NYT API">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="nyt-system-api-main" />
            <munit:enable-flow-source value="get:\articles\(searchTerm):nyt-system-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call to NYT API" doc:id="7e2fc4e3-5970-4498-a203-84575aeb4a5d" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Call NYT API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('sample_data/multiple_responses.json')]" mediaType="application/json" />
					<munit-tools:attributes value="#['statusCode':200]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/articles/searchTerm" doc:name="Request">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_multiplearticles.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
	<munit:test name="test-single-result" description="Verifying functionality of API when a single result is returned from the NYT API" doc:id="43148704-1808-4aca-97fe-7e21fa9cff9b">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="nyt-system-api-main" />
            <munit:enable-flow-source value="get:\articles\(searchTerm):nyt-system-api-config" />
        </munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call to NYT API" doc:id="d22ede4c-a059-49ee-8764-745485523e0e" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Call NYT API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[MunitTools::getResourceAsString('sample_data/single_response.json')]" mediaType="application/json" />
					<munit-tools:attributes value="#['statusCode':200]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request config-ref="HTTP_Request_Configuration" method="GET" path="/articles/searchTerm" doc:name="Request" doc:id="b88b3345-c772-4da3-abf9-0f1446d741da">
				<http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert that response code is 200" doc:id="98f1f370-6b9a-4ae2-a34d-1193f0fb70ab" />
			<munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_singlearticle.json'))]" message="The response payload is not correct!" doc:name="Assert that - Payload is Expected" doc:id="2649d3e4-f101-41a8-b592-ac5b53f737b9" />
		</munit:validation>
	</munit:test>
	
	<munit:test name="test-404-result" description="Verifying the API correctly handles a lack of results" doc:id="adf24a37-7d70-46b8-887a-82baae98c890">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="nyt-system-api-main" />
            <munit:enable-flow-source value="get:\articles\(searchTerm):nyt-system-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
        	<munit-tools:mock-when doc:name="Mock Call to NYT API" processor="http:request">
        		<munit-tools:with-attributes>
        			<munit-tools:with-attribute attributeName="doc:name" whereValue="Call NYT API"/>
        		</munit-tools:with-attributes>
        		<munit-tools:then-return>
        			<munit-tools:payload value="#[MunitTools::getResourceAsString('sample_data/no_responses.json')]" mediaType="application/json"/>
					<munit-tools:attributes value="#['statusCode':200]" />
        		</munit-tools:then-return>
        	</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
			<http:request config-ref="HTTP_Request_Configuration" method="GET" path="/articles/searchTerm" doc:name="Request">
				<http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,404" />
				</http:response-validator>
			</http:request>
        </munit:execution>
        <munit:validation>
        	<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP status code is not correct!" doc:name="Assert that response code is 404"/>
        </munit:validation>
	</munit:test>
	
	<munit:test name="test-429-result" description="MUnit Test" doc:id="1dec44c5-3bc8-43f1-a744-e696a6c77ff5" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call to NYT API" doc:id="d735ddb5-4a28-4ffe-ac96-d37609bf153e" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Call NYT API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:attributes value="#['statusCode':429]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request config-ref="HTTP_Request_Configuration" method="GET" path="/articles/searchTerm" doc:name="Request">
				<http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,404,406" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(406)]" message="The HTTP status code is not correct!" doc:name="Assert that response code is 406" />
			<munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_406_toomanysearches.json'))]" message="The response payload is not correct!" doc:name="Assert that - Payload is Expected"  />
		</munit:validation>
	</munit:test>
</mule>
